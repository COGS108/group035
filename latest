{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports\n",
    "# \n",
    "# Note: these are all the imports you need for this assignment!\n",
    "# Do not import any other functions / packages\n",
    "\n",
    "# Display plots directly in the notebook instead of in a new window\n",
    "%matplotlib inline\n",
    "\n",
    "# Import libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Statmodels & patsy\n",
    "import patsy\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# map\n",
    "from shapely.geometry import Point\n",
    "import geopandas as gpd\n",
    "from geopandas import GeoDataFrame\n",
    "\n",
    "# remove warnings\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## load data from global terrorism db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel('globalterrorismdb_0919dist.xlsx') # (191464, 135)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### preprocess the data to select useful columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[['iyear','imonth','iday','country','country_txt','region','region_txt','provstate','city','latitude','longitude','success','attacktype1','attacktype1_txt','weaptype1','weaptype1_txt','weapsubtype1','weapsubtype1_txt','suicide','targtype1','targtype1_txt','targsubtype1','targsubtype1_txt','natlty1','natlty1_txt','gname','motive','nperps','nperpcap','claimed','nkill','nkillus','nkillter','nwound','nwoundus','property','propextent','propvalue','ishostkid','nhostkid','nhostkidus','ransom','ransomamt','hostkidoutcome']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### plot terrorism incidents trends for overview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f99c189e240>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[['iyear']].hist(bins=25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### process nationality/country to dictionary "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "nationality_codes = []\n",
    "nationality_txt = []\n",
    "\n",
    "filepath = 'nationality_dict.txt'\n",
    "f = open(filepath, \"r\", encoding='utf-8-sig')\n",
    "for x in f:\n",
    "    tmp_list = x.split('=')\n",
    "    tmp_code = int(tmp_list[0].strip())\n",
    "    tmp_txt = tmp_list[1].strip()\n",
    "    nationality_codes.append(tmp_code)\n",
    "    nationality_txt.append(tmp_txt)\n",
    "f.close()\n",
    "\n",
    "nationality_dict = dict(zip(nationality_codes, nationality_txt))\n",
    "nationality_map_tmp = range(225)\n",
    "nationality_idx_map_dict = dict(zip(nationality_map_tmp, nationality_codes)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import copy\n",
    "country_dict = copy.deepcopy(nationality_dict)\n",
    "country_code = copy.deepcopy(nationality_codes)\n",
    "\n",
    "# delete only countries that only appear as target/victim descriptors in the GTD.\n",
    "to_del_countries_key_list = [24, 79, 114, 125, 126, 134, 152, 163, 169, 192, 206, 212, 216, 225, 233, 238, 334, 351, 520, 999, ]\n",
    "for i in to_del_countries_key_list: \n",
    "    del country_dict[i]\n",
    "    country_code.remove(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## get country data from World Bank (GDP,Population,...) called country_data_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9338, 53)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_data_df = pd.read_csv('country_data.csv')\n",
    "country_data_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### data clean country_data_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### drop useless columns and rename columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "country_data_df.drop(['Series Code','Country Code'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_col_2 = list(range(1970, 2019))\n",
    "for i in range(0, len(new_col_2)): \n",
    "    new_col_2[i] = str(new_col_2[i]) \n",
    "new_col_1 = ['type', 'country']\n",
    "new_col = new_col_1 + new_col_2\n",
    "country_data_df.columns = new_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "country_data_df = country_data_df[country_data_df['country'].notnull()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### rename some of the country names of country_data_df to be consistent with df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace left with right \n",
    "# Bahamas, The;Bahamas\n",
    "# Bosnia and Herzegovina;Bosnia-Herzegovina\n",
    "# Brunei Darussalam;Brunei\n",
    "# Congo,Rep.;Republic of the Congo\n",
    "# Egypt,Arab Rep.;Egypt\n",
    "# Gambia,The;Gambia\n",
    "# Hong Kong SAR,China;Hong Kong\n",
    "# Iran, Islamic Rep.;Iran\n",
    "# Côte d'Ivoire;Ivory Coast\n",
    "# Kyrgyz Republic;Kyrgyzstan\n",
    "# Lao PDR;Laos\n",
    "# Macao SAR,China;Macau\n",
    "# North Macedonia;Macedonia\n",
    "# Korea, Dem. People’s Rep.;North Korea\n",
    "# Russian Federation;Russia\n",
    "# Korea, Rep.;south korea\n",
    "# Eswatini;Swaziland\n",
    "# Syrian Arab Republic;Syria\n",
    "# Venezuela, RB;Venezuela\n",
    "# Yemen,Rep.;Yemen\n",
    "# Congo,Dem.Rep.;Democratic Republic of the Congo\n",
    "# Timor-Leste;East Timor\n",
    "\n",
    "country_data_df['country'].replace('Bosnia and Herzegovina','Bosnia-Herzegovina', inplace=True)\n",
    "country_data_df['country'].replace('Brunei Darussalam','Brunei', inplace=True)\n",
    "country_data_df['country'].replace('Bahamas, The','Bahamas', inplace=True)\n",
    "country_data_df['country'].replace('Congo, Rep.','Republic of the Congo', inplace=True)\n",
    "country_data_df['country'].replace('Egypt, Arab Rep.','Egypt', inplace=True)\n",
    "country_data_df['country'].replace('Gambia, The','Gambia', inplace=True)\n",
    "country_data_df['country'].replace('Hong Kong SAR, China','Hong Kong', inplace=True)\n",
    "country_data_df['country'].replace('Iran, Islamic Rep.','Iran', inplace=True)\n",
    "country_data_df['country'].replace(\"Cote d'Ivoire\",'Ivory Coast', inplace=True)\n",
    "country_data_df['country'].replace('Kyrgyz Republic','Kyrgyzstan', inplace=True)\n",
    "country_data_df['country'].replace('Lao PDR','Laos', inplace=True)\n",
    "country_data_df['country'].replace('Macao SAR, China','Macau', inplace=True)\n",
    "country_data_df['country'].replace('North Macedonia','Macedonia', inplace=True)\n",
    "country_data_df['country'].replace('Korea, Dem. People’s Rep.','North Korea', inplace=True)\n",
    "country_data_df['country'].replace('Russian Federation','Russia', inplace=True)\n",
    "country_data_df['country'].replace('Korea, Rep.','South Korea', inplace=True)\n",
    "country_data_df['country'].replace('Eswatini','Swaziland', inplace=True)\n",
    "country_data_df['country'].replace('Syrian Arab Republic','Syria', inplace=True)\n",
    "country_data_df['country'].replace('Venezuela, RB','Venezuela', inplace=True)\n",
    "country_data_df['country'].replace('Yemen, Rep.','Yemen', inplace=True)\n",
    "country_data_df['country'].replace('Congo, Dem. Rep.','Democratic Republic of the Congo', inplace=True)\n",
    "country_data_df['country'].replace('Timor-Leste','East Timor', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### standardize some contry in df  (these countries change name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ;People's Republic of the Congo  --> same as 'Republic of the Congo'\n",
    "# ;Zaire -->  same as 'Democratic Republic of the Congo'\n",
    "# ;East Germany (GDR)/West Germany (FRG)  --> 'Germany'\n",
    "# ;South Vietnam --> 'Vietnam'\n",
    "# ;South Yemen/North Yemen --> 'Yemen'\n",
    "# ;Rhodesia --> 'Zimbabwe'\n",
    "\n",
    "df['country_txt'].replace(\"People's Republic of the Congo\",'Republic of the Congo', inplace=True)\n",
    "df['country_txt'].replace(\"Zaire\",'Democratic Republic of the Congo', inplace=True)\n",
    "df['country_txt'].replace(\"East Germany (GDR)\",'Germany', inplace=True)\n",
    "df['country_txt'].replace(\"West Germany (FRG)\",'Germany', inplace=True)\n",
    "df['country_txt'].replace(\"South Yemen\",'Yemen', inplace=True)\n",
    "df['country_txt'].replace(\"North Yemen\",'Yemen', inplace=True)\n",
    "df['country_txt'].replace(\"South Vietnam\",'Vietnam', inplace=True)\n",
    "df['country_txt'].replace(\"Rhodesia\",'Zimbabwe', inplace=True)\n",
    "df['country_txt'].replace(\"West Bank and Gaza Strip\",'West Bank and Gaza', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### missing countries in df; + 4 countries changes over time ('Czechoslovakia', 'Serbia-Montenegro', 'Soviet Union', 'Yugoslavia')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ;Falkland Islands # missing\n",
    "# ;French Guiana # missing\n",
    "# ;Guadeloupe # missing\n",
    "# ;Martinique # missing\n",
    "# ;Taiwan # missing\n",
    "# ;Vatican City # missing\n",
    "# ;New Hebrides # missing\n",
    "# ;Western Sahara # missing \n",
    "# ;International # missing \n",
    "# ;Wallis and Futuna #missing\n",
    "missing_country = ['Falkland Islands', 'French Guiana', 'Guadeloupe', 'Martinique', 'Taiwan', 'Vatican City', 'New Hebrides', 'Western Sahara', 'International', 'Wallis and Futuna']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ;Yugoslavia --> 南斯拉夫\n",
    "# ;Czechoslovakia --> 'Czech Republic' + 'Slovak Republic'\n",
    "# Serbia;Serbia-Montenegro  --> 'Serbia' + 'Montenegro'\n",
    "# ;Soviet Union --> 'Russia' + 'Ukraine' + 'Belarus' + 'Uzbekistan' + 'Kazakhstan' + 'Georgia' + 'Azerbaijan' + 'Lithuania' + 'Moldova' + 'Latvia' + 'Kyrgyzstan' + 'Tajikistan' + 'Turkmenistan' + 'Armenia' + 'Estonia'\n",
    "changing_country = ['Czechoslovakia', 'Serbia-Montenegro', 'Soviet Union', 'Yugoslavia']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "need_to_drop_countries = missing_country + changing_country"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### compare the remaining country differences in two datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_countries_df = set(df['country_txt'].unique())\n",
    "all_countries_country_data = set(country_data_df['country'].unique())\n",
    "country_diff = all_countries_df - all_countries_country_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in need_to_drop_countries:\n",
    "    country_diff.remove(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### check how many rows need to be dropped from df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(442, 44)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop these countries data   442 out of 191464, not too bad \n",
    "df[df['country_txt'].isin(need_to_drop_countries)].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(191022, 44)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# new cleaned df: df_cleaned \n",
    "df_cleaned = df[~df['country_txt'].isin(need_to_drop_countries)]\n",
    "df_cleaned.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## data visualization "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### fit linear regression for each country \n",
    "number of incidents = a + b * iyear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f999ed91f28>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_cleaned[df_cleaned['country_txt'] == 'United States'][['iyear']].hist(bins=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "clean_country_list = list(country_data_df['country'].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### get #incident in each country in each year "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 183 * 49 list \n",
    "# each entry store #incident in each country in each year \n",
    "# res[i] correspond to ith country in clean_country_list\n",
    "incidents_res = []\n",
    "for country in clean_country_list:\n",
    "    for year in range(1970, 2019):\n",
    "        data_year = df_cleaned[df_cleaned['iyear'] == year]\n",
    "        if year == 1970:\n",
    "            incidents_res.append([])\n",
    "        incidents_res[-1].append(sum(data_year['country_txt'] == country))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### compute incidents rate for each country "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "incidents_rate = []  # 183 * 2; each element is two coefficient for each country \n",
    "                     # #incident = intercept + coefficient * iyear\n",
    "for i in range(len(incidents_res)):\n",
    "    test1 = pd.DataFrame(list(zip(list(range(1970, 2019)), incidents_res[i])), columns =['year', 'number'])\n",
    "    outcome, predictors = patsy.dmatrices('number ~ year', test1)\n",
    "    mod = sm.OLS(outcome, predictors)\n",
    "    res = mod.fit()\n",
    "    \n",
    "    incidents_rate.append([res.params[0], res.params[1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for i in range(len(incidents_res)):\n",
    "#     test1 = pd.DataFrame(list(zip(list(range(1970, 2019)), incidents_res[i])), columns =['year', 'number'])\n",
    "#     outcome, predictors = patsy.dmatrices('number ~ year', test1)\n",
    "#     mod = sm.OLS(outcome, predictors)\n",
    "#     res = mod.fit()\n",
    "    \n",
    "# #     ax = plt.subplot(3, 3, i + 1) # nrows, ncols, axes position\n",
    "        \n",
    "#     plt.scatter(test1['year'], test1['number'], alpha=0.3, label='Data');\n",
    "\n",
    "#     # Generate and plot the model fit line\n",
    "#     xs = np.arange(test1['year'].min(), test1['year'].max())\n",
    "#     ys = res.params[0] + res.params[1] * xs\n",
    "#     plt.plot(xs, ys, '--k', linewidth=4, label='Model')\n",
    "\n",
    "#     plt.xlabel('year')\n",
    "#     plt.ylabel(clean_country_list[i])\n",
    "#     plt.show()   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### use geopandas to plot the incidents rate on world map (cluster countries as 3 categories: increase, constant, decrease)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### data preprocessing to geopandas world map, match countries and remove unnecessary countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "world.name.replace(\"Bosnia and Herz.\", \"Bosnia-Herzegovina\", inplace=True)\n",
    "world.name.replace(\"Côte d'Ivoire\", \"Ivory Coast\", inplace=True)\n",
    "world.name.replace(\"Dem. Rep. Congo\", \"Democratic Republic of the Congo\", inplace=True)\n",
    "world.name.replace(\"Dominican Rep.\", \"Dominican Republic\", inplace=True)\n",
    "world.name.replace(\"United States of America\", \"United States\", inplace=True)\n",
    "world.name.replace(\"eSwatini\", \"Swaziland\", inplace=True)\n",
    "world.name.replace(\"Timor-Leste\", \"East Timor\", inplace=True)\n",
    "world.name.replace(\"Central African Rep.\", \"Central African Republic\", inplace=True)\n",
    "world.name.replace(\"Slovakia\", \"Slovak Republic\", inplace=True)\n",
    "world.name.replace(\"S. Sudan\", \"South Sudan\", inplace=True)\n",
    "world.name.replace(\"Solomon Is.\", \"Solomon Islands\", inplace=True)\n",
    "world.name.replace(\"Eq. Guinea\", \"Equatorial Guinea\", inplace=True)\n",
    "world.name.replace(\"Czechia\", \"Czech Republic\", inplace=True)\n",
    "world.name.replace(\"Congo\", \"Republic of the Congo\", inplace=True)\n",
    "\n",
    "\n",
    "world = world[(world.pop_est>0) & (world.name!=\"Antarctica\") & (world.name!=\"Falkland Is.\") \n",
    "              & (world.name!=\"Fr. S. Antarctic Lands\")\n",
    "             & (world.name!=\"Greenland\") & (world.name!=\"Mongolia\") & (world.name!=\"N. Cyprus\")\n",
    "             & (world.name!=\"Oman\") & (world.name!=\"Palestine\") & (world.name!=\"Puerto Rico\")\n",
    "             & (world.name!=\"Somaliland\") & (world.name!=\"Taiwan\") & (world.name!=\"W. Sahara\")\n",
    "             & (world.name!=\"Afghanistan\") & (world.name!=\"Iraq\")   # taking these two out because their increase rate is too crazy\n",
    "             ]\n",
    "\n",
    "world.index = list(range(world.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### categorize countries into three classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# within +/- 0.01 ==> middle \n",
    "# > 0.01 ==> increase\n",
    "# < -0.01 ==> decrease\n",
    "incident_rate_3cluster = [1 if i >= 0.1 else -1 if i <= -0.1 else 0 for i in [i[1] for i in incidents_rate]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mapping between country and class name \n",
    "cluster_country_incident_rate_key = clean_country_list\n",
    "cluster_country_incident_rate_value = incident_rate_3cluster\n",
    "cluster_country_incident_rate_dict = dict(zip(cluster_country_incident_rate_key, cluster_country_incident_rate_value)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "old_min = min([i[1] for i in incidents_rate])\n",
    "old_range = max([i[1] for i in incidents_rate]) - old_min\n",
    "\n",
    "new_min = -5\n",
    "new_range = 5 + 0.9999999999 - new_min\n",
    "normalized_incidents_rate = [int((n - old_min) / old_range * new_range + new_min) for n in [i[1] for i in incidents_rate]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mapping between country and incidents rate  \n",
    "country_incident_rate_key = clean_country_list\n",
    "country_incident_rate_value = [i[1] for i in incidents_rate]\n",
    "country_incident_rate_dict = dict(zip(country_incident_rate_key, normalized_incidents_rate)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### generate world map (red to blue: red means increasing, blue means decreasing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x936 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "world['incident_rate'] = [0.0 for i in range(world.shape[0])]\n",
    "for i in range(world.shape[0]):\n",
    "    world['incident_rate'][i] = country_incident_rate_dict[world['name'][i]]\n",
    "    \n",
    "world.plot(column='incident_rate',cmap=\"coolwarm\", legend=True,legend_kwds={'orientation': \"horizontal\"}, figsize=(13,13));\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data analysis "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### fit population linear regression for each country  + fit gdp linear regression for each country \n",
    "(1) population = a + b * iyear\n",
    "\n",
    "(2) gdp = a + b * iyear"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### get data of gdp and population "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "country_data_df_GDP = country_data_df[country_data_df['type'] == 'GDP (current US$)']\n",
    "country_data_df_population = country_data_df[country_data_df['type'] == 'Population, total']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### reset the index of both dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "country_data_df_GDP.index = list(range(country_data_df_GDP.shape[0]))\n",
    "country_data_df_population.index = list(range(country_data_df_population.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### check for missing gdp and populations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "count_missing_population_list = [0] * country_data_df_population.shape[0]\n",
    "for i in range(183):\n",
    "    for j in country_data_df_population.columns:\n",
    "        if country_data_df_population[j][i] == '..':\n",
    "            count_missing_population_list[i] += 1 ;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "count_missing_gdp_list = [0] * country_data_df_population.shape[0]\n",
    "for i in range(183):\n",
    "    for j in country_data_df_population.columns:\n",
    "        if country_data_df_GDP[j][i] == '..':\n",
    "            count_missing_gdp_list[i] += 1 ;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# no countries has more than 20 missing population data \n",
    "# we should be good to plot without dropping rows \n",
    "len([i for i in count_missing_population_list if i >= 20])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 61 countries has more than 10 missing gdp data \n",
    "# 34 countries has more than 20 missing gdp data \n",
    "# 7 countries has more than 30 missing gdp data \n",
    "# 2 countries has more than 40 missing gdp data  \n",
    "# 1 country do not have any gdp data at all  \n",
    "# in terms of simplicity, we will fill the nan data with mean of existing data for the country \n",
    "len([i for i in count_missing_gdp_list if i >= 49])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### find population rate for each country "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "population_rate = []  # 183 * 2; each element is two coefficient for each country \n",
    "                     # population = intercept + coefficient * iyear\n",
    "for i in range(len(clean_country_list)):\n",
    "    temp = country_data_df_population[country_data_df_population['country'] == clean_country_list[i]].loc[:, ~country_data_df_population.columns.isin(['type', 'country'])]\n",
    "    population_list = temp.iloc[0].tolist()\n",
    "    population_list_2 = [int(i) for i in population_list if i != '..']\n",
    "    population_list = [int(i) if i != '..' else int(np.mean(population_list_2)) for i in population_list]\n",
    "    test2 = pd.DataFrame(list(zip(list(range(1970, 2019)), population_list)), columns =['year', 'population'])\n",
    "\n",
    "    outcome, predictors = patsy.dmatrices('population ~ year', test2)\n",
    "    mod = sm.OLS(outcome, predictors)\n",
    "    res = mod.fit()\n",
    "    \n",
    "#     plt.scatter(test2['year'], test2['population'], alpha=0.3, label='Data');\n",
    "\n",
    "#     # Generate and plot the model fit line\n",
    "#     xs = np.arange(test1['year'].min(), test1['year'].max())\n",
    "#     ys = res.params[0] + res.params[1] * xs\n",
    "#     plt.plot(xs, ys, '--k', linewidth=4, label='Model')\n",
    "\n",
    "#     plt.xlabel('year')\n",
    "#     plt.ylabel(clean_country_list[i])\n",
    "#     plt.show()   \n",
    "    \n",
    "    population_rate.append([res.params[0], res.params[1]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### find gdp rate for each country "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp_rate = []       # 183 * 2; each element is two coefficient for each country \n",
    "                     # gdp = intercept + coefficient * iyear\n",
    "for i in range(len(clean_country_list)):\n",
    "    temp = country_data_df_GDP[country_data_df_GDP['country'] == clean_country_list[i]].loc[:, ~country_data_df_GDP.columns.isin(['type', 'country'])]\n",
    "    gdp_list = temp.iloc[0].tolist()\n",
    "    gdp_list_2 = [float(i) for i in gdp_list if i != '..']\n",
    "    gdp_list = [float(i) if i != '..' else float(np.mean(gdp_list_2)) if len(gdp_list_2) > 0 else 0.0 for i in gdp_list]\n",
    "    test2 = pd.DataFrame(list(zip(list(range(1970, 2019)), gdp_list)), columns =['year', 'gdp'])\n",
    "\n",
    "    outcome, predictors = patsy.dmatrices('gdp ~ year', test2)\n",
    "    mod = sm.OLS(outcome, predictors)\n",
    "    res = mod.fit()\n",
    "    \n",
    "#     plt.scatter(test2['year'], test2['gdp'], alpha=0.3, label='Data');\n",
    "\n",
    "#     # Generate and plot the model fit line\n",
    "#     xs = np.arange(test1['year'].min(), test1['year'].max())\n",
    "#     ys = res.params[0] + res.params[1] * xs\n",
    "#     plt.plot(xs, ys, '--k', linewidth=4, label='Model')\n",
    "\n",
    "#     plt.xlabel('year')\n",
    "#     plt.ylabel(clean_country_list[i])\n",
    "#     plt.show()   \n",
    "    \n",
    "    gdp_rate.append([res.params[0], res.params[1]])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### fit linear regression of incident rate and population rate \n",
    "incident rate = a + b * population rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>incident_rate</td>  <th>  R-squared:         </th> <td>   0.076</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.070</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   14.80</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Fri, 06 Dec 2019</td> <th>  Prob (F-statistic):</th> <td>0.000165</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>07:54:40</td>     <th>  Log-Likelihood:    </th> <td> -547.81</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   183</td>      <th>  AIC:               </th> <td>   1100.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   181</td>      <th>  BIC:               </th> <td>   1106.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>       <td>    0.6247</td> <td>    0.372</td> <td>    1.678</td> <td> 0.095</td> <td>   -0.110</td> <td>    1.359</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>population_rate</th> <td> 8.539e-07</td> <td> 2.22e-07</td> <td>    3.847</td> <td> 0.000</td> <td> 4.16e-07</td> <td> 1.29e-06</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>285.062</td> <th>  Durbin-Watson:     </th> <td>   1.885</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>31212.673</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 7.145</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td>65.364</td>  <th>  Cond. No.          </th> <td>1.74e+06</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.74e+06. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          incident_rate   R-squared:                       0.076\n",
       "Model:                            OLS   Adj. R-squared:                  0.070\n",
       "Method:                 Least Squares   F-statistic:                     14.80\n",
       "Date:                Fri, 06 Dec 2019   Prob (F-statistic):           0.000165\n",
       "Time:                        07:54:40   Log-Likelihood:                -547.81\n",
       "No. Observations:                 183   AIC:                             1100.\n",
       "Df Residuals:                     181   BIC:                             1106.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===================================================================================\n",
       "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-----------------------------------------------------------------------------------\n",
       "Intercept           0.6247      0.372      1.678      0.095      -0.110       1.359\n",
       "population_rate  8.539e-07   2.22e-07      3.847      0.000    4.16e-07    1.29e-06\n",
       "==============================================================================\n",
       "Omnibus:                      285.062   Durbin-Watson:                   1.885\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            31212.673\n",
       "Skew:                           7.145   Prob(JB):                         0.00\n",
       "Kurtosis:                      65.364   Cond. No.                     1.74e+06\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 1.74e+06. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test4 = pd.DataFrame(list(zip([i[1] for i in incidents_rate], [i[1] for i in population_rate])), columns =['incident_rate', 'population_rate'])\n",
    "\n",
    "outcome, predictors = patsy.dmatrices('incident_rate ~ population_rate', test4)\n",
    "mod = sm.OLS(outcome, predictors)\n",
    "res = mod.fit()\n",
    "\n",
    "# plt.scatter(test4['population_rate'], test4['incident_rate'], alpha=0.3, label='Data');\n",
    "\n",
    "# # Generate and plot the model fit line\n",
    "# xs = np.arange(test4['population_rate'].min(), test4['population_rate'].max())\n",
    "# ys = res.params[0] + res.params[1] * xs\n",
    "# plt.plot(xs, ys, '--k', linewidth=4, label='Model')\n",
    "\n",
    "# plt.xlabel('population_rate')\n",
    "# plt.ylabel('incident_rate')\n",
    "# plt.show()   \n",
    "\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### fit linear regression of incident rate and gdp rate \n",
    "incident rate = a + b * gdp rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>incident_rate</td>  <th>  R-squared:         </th> <td>   0.002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>  -0.003</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>  0.4535</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Fri, 06 Dec 2019</td> <th>  Prob (F-statistic):</th>  <td> 0.502</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>07:54:50</td>     <th>  Log-Likelihood:    </th> <td> -554.77</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   183</td>      <th>  AIC:               </th> <td>   1114.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   181</td>      <th>  BIC:               </th> <td>   1120.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>    1.0678</td> <td>    0.384</td> <td>    2.781</td> <td> 0.006</td> <td>    0.310</td> <td>    1.825</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>gdp_rate</th>  <td>-6.928e-12</td> <td> 1.03e-11</td> <td>   -0.673</td> <td> 0.502</td> <td>-2.72e-11</td> <td> 1.34e-11</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>275.742</td> <th>  Durbin-Watson:     </th> <td>   1.909</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>24411.902</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 6.819</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td>57.914</td>  <th>  Cond. No.          </th> <td>3.84e+10</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 3.84e+10. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          incident_rate   R-squared:                       0.002\n",
       "Model:                            OLS   Adj. R-squared:                 -0.003\n",
       "Method:                 Least Squares   F-statistic:                    0.4535\n",
       "Date:                Fri, 06 Dec 2019   Prob (F-statistic):              0.502\n",
       "Time:                        07:54:50   Log-Likelihood:                -554.77\n",
       "No. Observations:                 183   AIC:                             1114.\n",
       "Df Residuals:                     181   BIC:                             1120.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept      1.0678      0.384      2.781      0.006       0.310       1.825\n",
       "gdp_rate   -6.928e-12   1.03e-11     -0.673      0.502   -2.72e-11    1.34e-11\n",
       "==============================================================================\n",
       "Omnibus:                      275.742   Durbin-Watson:                   1.909\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            24411.902\n",
       "Skew:                           6.819   Prob(JB):                         0.00\n",
       "Kurtosis:                      57.914   Cond. No.                     3.84e+10\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 3.84e+10. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test5 = pd.DataFrame(list(zip([i[1] for i in incidents_rate], [i[1] for i in gdp_rate])), columns =['incident_rate', 'gdp_rate'])\n",
    "\n",
    "gdp_outcome, gdp_predictors = patsy.dmatrices('incident_rate ~ gdp_rate', test5)\n",
    "gdp_mod = sm.OLS(gdp_outcome, gdp_predictors)\n",
    "gdp_res = gdp_mod.fit()\n",
    "\n",
    "# plt.scatter(test5['gdp_rate'], test5['incident_rate'], alpha=0.3, label='Data1');\n",
    "\n",
    "\n",
    "# # Generate and plot the model fit line\n",
    "# gdp_xs = np.arange(test5['gdp_rate'].min(), test5['gdp_rate'].max())\n",
    "# gdp_ys = gdp_res.params[0] + gdp_res.params[1] * gdp_xs\n",
    "# plt.plot(gdp_xs, gdp_ys, '--k', linewidth=4, label='Model1')\n",
    "\n",
    "# plt.xlabel('gdp_rate')\n",
    "# plt.ylabel('incident_rate')\n",
    "# plt.show()   \n",
    "\n",
    "gdp_res.summary()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### fit linear regression together\n",
    "incident rate = a + b * population rate + c * gdp rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>incident_rate</td>  <th>  R-squared:         </th> <td>   0.106</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.096</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   10.63</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Fri, 06 Dec 2019</td> <th>  Prob (F-statistic):</th> <td>4.32e-05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>07:58:43</td>     <th>  Log-Likelihood:    </th> <td> -544.78</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   183</td>      <th>  AIC:               </th> <td>   1096.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   180</td>      <th>  BIC:               </th> <td>   1105.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>       <td>    0.7547</td> <td>    0.371</td> <td>    2.034</td> <td> 0.043</td> <td>    0.023</td> <td>    1.487</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>population_rate</th> <td> 1.087e-06</td> <td> 2.39e-07</td> <td>    4.557</td> <td> 0.000</td> <td> 6.16e-07</td> <td> 1.56e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>gdp_rate</th>        <td>-2.619e-11</td> <td> 1.06e-11</td> <td>   -2.460</td> <td> 0.015</td> <td>-4.72e-11</td> <td>-5.18e-12</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>291.177</td> <th>  Durbin-Watson:     </th> <td>   1.888</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>34280.916</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 7.409</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td>68.393</td>  <th>  Cond. No.          </th> <td>3.91e+10</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 3.91e+10. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:          incident_rate   R-squared:                       0.106\n",
       "Model:                            OLS   Adj. R-squared:                  0.096\n",
       "Method:                 Least Squares   F-statistic:                     10.63\n",
       "Date:                Fri, 06 Dec 2019   Prob (F-statistic):           4.32e-05\n",
       "Time:                        07:58:43   Log-Likelihood:                -544.78\n",
       "No. Observations:                 183   AIC:                             1096.\n",
       "Df Residuals:                     180   BIC:                             1105.\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===================================================================================\n",
       "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-----------------------------------------------------------------------------------\n",
       "Intercept           0.7547      0.371      2.034      0.043       0.023       1.487\n",
       "population_rate  1.087e-06   2.39e-07      4.557      0.000    6.16e-07    1.56e-06\n",
       "gdp_rate        -2.619e-11   1.06e-11     -2.460      0.015   -4.72e-11   -5.18e-12\n",
       "==============================================================================\n",
       "Omnibus:                      291.177   Durbin-Watson:                   1.888\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            34280.916\n",
       "Skew:                           7.409   Prob(JB):                         0.00\n",
       "Kurtosis:                      68.393   Cond. No.                     3.91e+10\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 3.91e+10. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test6 = pd.DataFrame(list(zip([i[1] for i in incidents_rate], [i[1] for i in population_rate], [i[1] for i in gdp_rate])), columns =['incident_rate', 'population_rate', 'gdp_rate'])\n",
    "\n",
    "gdp_population_outcome, gdp_population_predictors = patsy.dmatrices('incident_rate ~ population_rate + gdp_rate', test6)\n",
    "gdp_population_mod = sm.OLS(gdp_population_outcome, gdp_population_predictors)\n",
    "gdp_population_res = gdp_population_mod.fit()\n",
    "\n",
    "# plt.scatter(test4['population_rate'], test4['incident_rate'], alpha=0.3, label='Data');\n",
    "\n",
    "# # Generate and plot the model fit line\n",
    "# xs = np.arange(test4['population_rate'].min(), test4['population_rate'].max())\n",
    "# ys = res.params[0] + res.params[1] * xs\n",
    "# plt.plot(xs, ys, '--k', linewidth=4, label='Model')\n",
    "\n",
    "# plt.xlabel('population_rate')\n",
    "# plt.ylabel('incident_rate')\n",
    "# plt.show()   \n",
    "\n",
    "gdp_population_res.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Conclusion: given the summary above, we can see that population rate and gdp rate has statiscally significance in terms of incidents rate. \n",
    "incidents rate = 0.7547 + 1.087e-06 * population_rate + (-2.619e-11) * gdp_rate"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
